[
  
  {
    "title": "대규모 시스템 설계 기초",
    "url": "/posts/%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84-%EA%B8%B0%EC%B4%88/",
    "categories": "책읽기",
    "tags": "",
    "date": "2024-04-19 00:00:00 +0900",
    





    
    "snippet": "대규모 시스템 설계 기초내가 어느정도 알고 있는지 점검하기.대개 웹 애플리케이션은 클라이언트 서버 패턴이다.옛날에는 거의 단일 서버(PHP, JSP, etc)에서 클라이언트 / 서버 애플리케이션을 실행했다.하지만 근래에는 사용자 경험을 향상시키기 위해서 CSR(Client Side Rendering)이 나왔고, 그 다음엔 CSR 문제를 해결하기 위해 ...",
    "content": "대규모 시스템 설계 기초내가 어느정도 알고 있는지 점검하기.대개 웹 애플리케이션은 클라이언트 서버 패턴이다.옛날에는 거의 단일 서버(PHP, JSP, etc)에서 클라이언트 / 서버 애플리케이션을 실행했다.하지만 근래에는 사용자 경험을 향상시키기 위해서 CSR(Client Side Rendering)이 나왔고, 그 다음엔 CSR 문제를 해결하기 위해 SSR(Server Side Rendering)이 나왔다.SSR은 NextJS가 나오면서 옛날과는 다르게 렌더링만 담당하는 서버를 두고, HTML을 렌더링하기 위해 API 서버를 두는 방식으로 발전하였다.그러므로 프론트엔드 개발자도, 서버 개발자도 지속적으로 인프라 레벨을 공부해야한다.  단일 웹서비스 서버 구조          서버에서 모든 것을 처리한다.      웹 애플리케이션 서버, 데이터베이스 서버, 캐시 서버 등을 하나의 서버에서 처리한다.      병목 지점 발생시 스케일 업이라는 하드웨어 성능을 높이는 방법밖에 없다.      SPOF(Single Point of Failure)가 발생할 수 있다.        웹 서버 + 데이터베이스 서버 구조          웹 서버와 데이터베이스 서버를 분리한다.      이렇게 되면 스케일 아웃(서버 병렬 확장)이 가능하다.      LB, ALB 가 필요해진다.      RDBMS를 사용하면 자체적으로 Master-Slave 구조를 지원한다.      일단 이정도로 정리.수직적 규모확장 vs 수평적 규모 확장스케일 업: 단순 하드웨어 성능을 높이는 방법스케일 아웃: 서버를 병렬로 늘리는 방법수직적 규모 확장에는 한계가 있다. 한 대의 서버에 CPU나 메모리를 무한대로 증설할 방법은 없다.수직적 규모 확장법은 장애에 대한 자동복구(failover) 방안이나 다중화(re-dundancy) 방안이 없다. 서버에 장애가 발생하면 웹사이트/앱은 완전히 중단된다.로드밸런서  로드밸런서는 서버에 들어오는 트래픽을 분산시켜주는 장치이다.  사용자는 로드밸런서로 접근해(public IP) 서버로 접근한다.  서버는 private IP를 사용한다. 따라서 서버는 외부에서 직접 접근할 수 없다.데이터베이스 다중화  Master, Slave 구조를 대부분의 RDBMS가 지원한다. 데이터 원본은 주 서버에, 사본은 부 서버에 저장하는 방식이다.  쓰기 연산은 Master에서만 지원한다. 부 데이터베이스는 주 데이터베이스로부터 그 사본을 전달받으며, 읽기연산만을 지원한다.웹 계층과 데이터 계층에 대한 부분은 위의 글을 참조.아래는 응답시간(la-tency)을 개선해 볼 순서다.응답 시간은 캐시를 붙이고 정적 콘텐츠를 콘텐츠 전송 네트워크(Content Delivery Network, CDN)으로 옮기면 개선.캐시캐시는 값비싼 연산 결과 또는 자주 참조되는 데이터를 메모리 안에 두고, 다음에 같은 데이터를 요청할 때 빠르게 응답할 수 있도록 하는 기술이다.캐시 계층캐시 계층(cache tier)은 데이터가 잠시 보관되는 곳으로 데이터베이스보다 훨씬 빠르다.캐시 사용시 유의할 점  데이터 갱신은 자주 일어나지 않지만, 참조는 자주 일어나는 데이터에 캐시를 건다.  영속적으로 보관할 데이터를 캐시에 넣지 말자.  캐시 만료 정책을 설정하는 건 좋은 습관이다.  일관성은 어떻게 유지되는가? 저장소의 원본을 갱신하는 연산과 캐시를 갱신하는 연산이 단일 트랜잭션으로 처리되지 않는 경우 이 일관성은 깨질 수 있다.          이에 관련하여 Fackbook 논문 (Scaling Memcache at Facebook)을 참조하자.        장애에는 어떻게 대처할 것인가? 캐시 서버를 한 대만 두는 경우 해당 서버는 단일 장애 지점(Single Point of Failure, SPOF)이 되어버릴 가능성이 있다.  캐시 메모리는 얼마나 크게 잡을 것인가? 캐시 메모리가 너무 작으면 액세스 패턴에 따라서는 데이터가 너무 자주 캐시에서 밀려나버리므로 캐시의 성능이 떨어진다. 해결할 방법은 캐시 메모리를 과할당 하는 것이다.  데이터 방출 정책은 무엇인가? 캐시 데이터 방출 정책 중 LRU(Least Recently Used)가 가장 많이 사용된다. 다른 정책도 있으므로 적절하게 선택해야한다.CDN무상태 웹 계층  웹 계층을 수평적으로 확장하는 방법을 고민해보자. 이를 위해서는 상태 정보(사용자 세션 데이터와 같은)를 웹 계층에서 제거한다.  이렇게 하지 않으면 수평적으로 확장되었을 때 A 서버에 저장되어 있는 상태 정보가 B 서버로 이동되지 않아 사용자가 로그인 상태를 유지하지 못하는 문제가 발생한다.데이터 센터"
  },
  
  {
    "title": "소프트웨어 장인 정신",
    "url": "/posts/software-professional/",
    "categories": "소프트웨어 프로페셔널",
    "tags": "소프트웨어, software, professional, 책읽기",
    "date": "2024-04-05 00:00:00 +0900",
    





    
    "snippet": "소프트웨어 장인정신  읽은 책: 소프트웨어 장인소프트웨어 장인정신주관적인 정의  소프트웨어 장인정신은 마스터가 되어가는 긴 여정이다. 소프트웨어 장인 정신은 소프트웨어 개발자가 스스로 선택한 커리어에 책임을 가지고, 지속적으로 새로운 도구와 기술을 익히며 발전하겠다는 마음가짐이다.소프트웨어 장인 정신은 책임감, 프로페셔널리즘, 실용주의 그리고 소프트웨...",
    "content": "소프트웨어 장인정신  읽은 책: 소프트웨어 장인소프트웨어 장인정신주관적인 정의  소프트웨어 장인정신은 마스터가 되어가는 긴 여정이다. 소프트웨어 장인 정신은 소프트웨어 개발자가 스스로 선택한 커리어에 책임을 가지고, 지속적으로 새로운 도구와 기술을 익히며 발전하겠다는 마음가짐이다.소프트웨어 장인 정신은 책임감, 프로페셔널리즘, 실용주의 그리고 소프트웨어 개발자로서의 자부심을 의미한다.짧은 정의  소프트웨어 장인정신은 소프트웨어 개발의 프로페셜리즘에 대한 것이다.이 부분이 소프트웨어 장인정신에서 가장 중요한 내용이다.정의 이상의 의미소프트웨어 장인정신은 어떤 이념이나 마음가짐에 더 가깝다고 생각한다. 자신이 하는 일에 주인의식을 가지고 프로페셔널하게 행동하고, 고객이 원하는 것이 무엇이든 달성할 수 있도록 돕는다. 다른 개발자들에게 배우고 자신의 지식을 나누며, 경험이 부족한 개발자들을 멘토링 하는 것들이다.메니페스토  소프트웨어 장인을 열망하는 우리는, 스스로의 기술을 연마하고, 다른 사람들이 기술을 배울 수 있도록 도움으로써 프로페셔널 소프트웨어 개발의 수준을 높인다. 이러한 일을 하는 과정에서 우리는 다음과 같은 가치들을 추구한다.  동작하는 소프트웨어뿐만 아니라, 정교하고 솜씨 있게 만들어진 작품을,변화에 대응하는 것뿐만 아니라, 계속해서 가치를 더하는 것을,개별적으로 협력하는 것뿐만 아니라, 프로페셔널 커뮤니티를 조성하는 것을,고객과 협업하는 것뿐만 아니라, 생산적인 동반자 관계를,  이 왼쪽의 항목들을 추구하는 과정에서, 오른쪽 항목들이 꼭 필요함을 의미한다.기술적 실행 관례올바른 일 vs 올바른 실행일을 올바르게 제대로 수행하고 있다는 것은 어떻게 알 수 있을까? 코드의 품질과 설계에서는 빠르고 짧은 피드백 루프를 어떻게 만들 수 있을까?소프트웨어 장인정신은 기술적 실행 관례에 집중함으로써 코드의 품질에 대한 빠르고 짧은 피드백 루프를 제공해 애자일을 보완하는 효과가 있다.기술적 실행 관례들은 우리가 일을 ‘올바르게’하고 있는지 알 수 있게 해준다.실행 관례와 가치비즈니스 가치 중심어떻게 하면 팀(또는 관리자, 회사)에 TDD나 페어 프로그래밍같은 것들을 도입하도록 설득할 수 있는가?기술적 실행 관례들 그 자체를 직접적으로 팔려고 드는 것은 아무런 의미가 없다.현재 일하는 방식과 비교해서 그 것이 가져올 이익에 집중을 해야 한다.빠른 피드백 루프, 요구사항과 비용에 대한 더 나은 이해, 지식 공유, 줄어드는 버그, 전체적으로 자동화되고 릴리즈가 빨라지는 일들이 기술적 실행관례를 도입함으로써 얻을 수 있는 가치들이다.자동화된 테스트자동화된 테스트는 클릭 한번으로 전체 시스템을 단 몇 분만에 검증할 수 있게 해준다.코드가 올바른지 알려주는 피드백 루프가 몇 주에서 몇 분으로 줄어 들면 실수를 거의 즉시 고칠 수 있다.자동화된 테스트는 실제 측정 가능한 비즈니스적 가치를 가져다 준다.테스트 먼저아이디어를 생각해내는 데도 도움이 되고 한 번에 하나씩만 집중할 수 있다.테스트 코드가 준비되어 있으면 각 테스트 작업들은 몇 msec(단위 테스트)에서 몇 초(상위 수준 테스트)정도 소요되어 피드백 루프가 상당히 빨라진다.테스트 코드는 잘 정리된 요구사항의 역할도 하기 때문에 딱 필요한 만큼만 코딩하도록 유도한다.이러한 것들이 바로 비즈니스적인 가치다.테스트 주도 개발사실 TDD는 설계에 대한 실행 관례다. 테스트가 코딩 방향을 주도하면 복잡한 코드를 작성하는 것 자체가 어려워진다.정확히 요구사항만큼만 만족시키는, 즉 테스트로 규정된 부분만 작성하게 되기 때문이다.첫 설계 단계에서는 요구사항을 확대 해석하고 미래에 있을지 모를 부가 조건들이 추가되기 쉬워 설계가 커지고 복잡해지는(BDUF: Big Design Up Front) 경향이 있다.그렇게 되지 않도록 막아준다.코드가 복잡하고 방대하면 테스트 자체가 어렵기 때문이다.  TDD와 설계 리뷰 미팅이 서로 배타적인 것은 아니다. 둘 다 필요하다. 하지만 각각이 제공하는 가치와 피드백 루프의 주기가 다름을 이해하고 있어야한다.TDD는 코드의 설계, 단순성, 유지보수 용이성에 대해 피드백이 빠르다. 또한 코드에 대한 살아 움직이는 문서 역할을 한다.회귀 테스트 역할도 해준다. 이런 것들이 TDD가 주는 비즈니스적인 가치다.지속적인 통합  지속적인 통합은 TDD와 함께 수행되어 피드백 루프를 단 몇 분으로 줄일 수 있다.          QA팀을 통해서 변경점마다, 통합 때마다 테스트하는 것이다. 이 건 며칠에서 몇 주 후에 버그가 있는지 피드백을 받을 수 있다.        이러한 실행 관례는 ‘일단 멈추고 버그부터 수정한다는 태도가 필요하다.’  시스템이 항상 배포 가능한 상태로 유지되고 버그가 누적되지 않는다는 점에서 효율이 높다는 장점이 있다.  훌륭한 테스터는 자동화 하기 어려운 임의의 사용자 시나리오에 집중하여 개발자를 돕는다.페어 프로그래밍코드 리뷰는 시스템에 대한 지식과 유용한 코딩 스킬을 팀 전체에 전하는 데도 좋다. 중요한 것은, 설계 리뷰와 마찬가지로 얼마나 자주 하느냐다.여러가지 문제들로 인해서 피드백 루프의 주기가 길어질 가능성이 높다.하지만 페어 프로그래밍을 하면 코드가 작성되자마자 그 품질에 대해 피드백을 받을 수 있다같은 페어끼리 너무 오래 있으면 효과가 적다. 하루 이틀 단위로 주기적으로 페어를 바꾸는 것이 좋다.페어 프로그래밍은 팀의 지식을 공유하고, 코드의 품질을 높이며, 팀의 생산성을 높이는데 도움이 된다.이러한 것들이 비즈니스적인 가치다. 즉각적인 피드백 루프가 만들어진다.리팩토링레거시 애플리케이션을 대상으로 일을 할 때, 전체 시스템을 한꺼번에 새로 작성하고 싶은 욕구를 조심해야 한다.이럴 때는 수정되는 부분에 한정해서 리펙토링을 집중하는 것이 더 나은 접근 방법이다.프로페셔널로써 행동한다는 것은 트레이드오프를 이해한다는 것이다. 몇년동안 바뀐 적이 없는 부분을 리팩토링하는 것은 의미가 없다. 애당초 코드를 수정할 필요가 없다면, 리팩토링해야 할 이유도 없다. 유지보수가 쉬운 깨끗한 코드는 개발 속도를 높이고 버그가 만들어질 가능성을 낮춘다. 이 것이 리팩토링의 비즈니스적인 가치다.책임감각 실행 관례들의 가치를 설명함에도 불구하고 여전히 많은 사람들이 받아들이기를 거부한다.“그런 것들은 다른 데서 그렇게 하고 있다는 사례에 지나지 않는다. 그 중 많은 것들이 필요없다. 실행 관례들 없이도 좋은 소프트웨어를 쉽게 개발할 수 있다” 라는 말들이 여전히 반복해서 들리고 있다.그 것이 사실일 수도 있다 하더라도, 대단히 모호한 주장이다. 구글에서 실패한 소프트웨어 프로젝트 비율을 검색해보면 얼마나 많은 프로젝트들이 이런 저런 형태로 실패했는지 여러 보고 자료와 통게를 찾아볼 수 있다.출처에 따라 다르지만 실패 비율이 30%에서 70%에 이른다.개발자이든 프로젝트 매니저이든, 비즈니스 담당이든, 이러한 실행 관례를 원하지 않는다고 하면 귀담아 들어야 한다. 기분 나쁘게 생각하거나 그 사람의 지식 부족을 의심할 이유는 전혀 없다. 우리는 그런 사람들과의 대화에서 배워야한다.하지만 앞서 설명된 가치들을 이야기한 후 “이러한 가치와 최소한 동등한 수준의 가치를 만들어 내기 위해 당신은(혹은 우리는) 무엇을 하고 있습니까? 이러한 실행 관례보다 더 나은 방법이 있습니까?” 우리의 의사 결정에 책임감을 가져야 한다. 여기에는 실행 관례를 도입하지 않는 결정도 포함된다.관리자들 역시 팀이 특정 실행 관례를 따르지 못하도록 할 때 그에 대한 책임감이 있어야 한다.실용주의언제든지 TDD보다 더 나은 가치와 더 빠른 피드백 루프를 줄 수 있는 다른 것이 있다면 그 것을 TDD 대신 도입해야 한다.무언가를 절대적인 진리로 바라보는 것은 바람직하지 않다. 항상 우리가 무엇을 하고 있고 그것을 왜 하고 있는지 질문해야한다.어떤 실행 관례가 다른 실행 관례보다 더 나은지 알아보는 가장 좋은 방법은 프로젝트에 어떤 가치를 주는지, 피드백 루프가 얼마나 긴지 비교해보는 것이다.소프트웨어 장인 정신은 전이된다.실제로 글쓴이가 경험한 일을 기반하여 말하자면, 소프트웨어 장인 정신은 전이된다.한 회사에서 있었던 일인데, 글쓴이 본인이 문제가 산재해있었던 조직에 소프트웨어 장인을 여럿 모아서 일을 했던 경험이 있다.여러가지 방법들로 다시금 버그, 딜리버리 속도 등이 점진적으로 개선되었다.모든 변화를 추진하기 전에, 그런 변화들의 영향에 대해서 고려해야한다.많은 사람들에게 이야기를 하고 여러 종류의 회의론자들이 던질 수 있는 난감한 질문들에 답할 준비가 되어 있어야 한다.작업을 구현과 테스트로 나누어서는 안 된다. 실행 관례를 전파하는 가장 효율적인 방법은 모범을 보이는 것이다.나의 생각읽으면서 답답하고 불편한 마음이 계속 든다. 나는 소프트웨어 장인이 되고 싶다. 소프트웨어 장인이라는 단어를 생각하면 가슴이 두근 거린다.앞으로 나는 어떻게 해야할까? 어떻게 하면 소프트웨어 장인이 될 수 있을까?  첫번째로는 블로그 포스트를 작성하면서 나의 생각을 정리하고, 다른 사람들과 소통하고 싶다.  두번째로는 책을 읽는 것에만 그치는 것이 아닌 읽은 것을 정리하고, 일과 내 삶에 적용해볼 것이다.  세번째로는 새로운 기술을 배우고, 적용해보며 나의 역량을 키워나갈 것이다.  네번째로는 다른 사람들과 소통하며, 서로의 생각을 공유하고 배울 것이다.  다섯번째로는 나의 목표를 세우고, 그것을 달성하기 위해 노력할 것이다."
  },
  
  {
    "title": "토이프로젝트 회고",
    "url": "/posts/%ED%86%A0%EC%9D%B4%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%9A%8C%EA%B3%A0/",
    "categories": "회고",
    "tags": "retrospect, 회고",
    "date": "2021-06-16 00:00:00 +0900",
    





    
    "snippet": "docker, WSL2, linux OS, Cloud Server(NCP), nginx, Spring boot, JPA,Spring data JPA, QueryDSL, AWS S3https://okky.kr 에 토이프로젝트 구인글을 올렸고, 뜻대로 프론트개발자 2명, 서버개발자 1명을 모집하여총 구성인원은 프론트개발자 2명, 서버개발자 본인포함 2명,...",
    "content": "docker, WSL2, linux OS, Cloud Server(NCP), nginx, Spring boot, JPA,Spring data JPA, QueryDSL, AWS S3https://okky.kr 에 토이프로젝트 구인글을 올렸고, 뜻대로 프론트개발자 2명, 서버개발자 1명을 모집하여총 구성인원은 프론트개발자 2명, 서버개발자 본인포함 2명, 웹 디자이너까지 5명이었다.프로젝트 리딩이 이토록 조원 컨트롤이 안될줄은 몰랐다.게다가 접점이 있는 사람들이 아니었다보니 더욱 힘들었던 것 같다.기획단계기획단계에선 조원들의 여러 의견과 아이디어를 조합하여 최종적으로 중고책거래 웹 어플리케이션이 뽑혔다.요구사항 등을 적절히 분석하지 못했는지, 기획단계에선 부족한점이 많았다고 생각한다.협업툴의 중요성을 실감하게 된 계기가 되지 않았나 싶다. 노션 무료버전은 너무나 스토리지가 작았다.설계단계프로젝트 기간이 충분하다고 생각하지 않았는데도 불구하고 많은 기능을 구현하려 했다.돌이켜보면 기능을 줄이고, 기능을 구현하는데 집중했어야 했는데, 그렇지 못했다.기술스택FE 언어는 typescript를 적용해보고 싶다 하여 승인하였다.처음 개발에 적용해봐서 그런지 프론트엔트 개발 속도가 나질 않았다.BE 언어는 java 11버전을 사용하였으며, 람다와 스트림을 사용해보려 노력해보았다.자잘한 얘기국비지원학원 프로젝트 이후 다시 한번 깨달은 점은, 토이프로젝트에서 책임감이 결여된 조원과의 커뮤니케이션은 상당히 어렵다는 것이었다.그래서 나는 최대한 많이 조원들과 얘기 나누고, 시간을 같이 보내려 노력했었다.클라우드 서버를 이용해서 배포를 처음 해보았는데, 배포하며 리눅스, 정적웹서버(프록시서버), ssl(https) 등을 적용하며 서버 관련하여 많이 깨달았다.docker로 centOS 이미지를 조원들에게 배포하였는데, 클라우드 서버 환경과 동일하게 구성하며 개발 환경을 조성하였다.도커를 사용해보지 않았던 조원들에게 사용법을 공유하고 서버 환경등을 설명하느라 시간을 많이 잡아먹었다.리눅스 CLI에 조금은 익숙해져 너무 좋았다.무중단 배포, jenkins등을 공부해보고 싶은 계기가 되었다.일일히 빌드된 파일을 서버에 전송하였는데, 상당히 번거로운 일이었다.여기서 구글드라이브를 사용하였고, gdown이라는 라이브러리를 사용하였다.처음 DB 설계 후 JPA 설계를 하였고, 연관관계 중 @ManyToOne 등의 default FetchType은 Eager이었으므로, 원치않는 쿼리가 자꾸 나가 모든 전략을 LAZY로 설정하여 작업 하였다.스스로 N + 1 쿼리를 짜지 않도록 유의하여 개발하였다.알라딘 api를 적용하여 책 카테고리 등을 받아왔는데, 프록시서버 구성으로 cors 문제는 발생하지 않도록 설계하였다.게시물 필터링 적용이 필요하여, jpql 로 개발하였는데, 개발하다 querydsl을 알게되어 querydsl 사용하여 동적쿼리를 구성하였다.select(new QArticleDTO(                    articleDAO.article_id,                    articleDAO.countDAO,                    articleDAO.title,                    articleDAO.tprice,                    articleDAO.progress,                    articleDAO.category,                    articleDAO.member.nickname,                    articleDAO.write_date,                    articleDAO.imageInfo.image1))            .from(articleDAO)            .join(articleDAO.member, memberDAO)            .join(articleDAO.countDAO, countDAO)            .join(articleDAO.category, book_CategoryDAO)            .join(articleDAO.imageInfo, image_infoDAO)            .where(                    articleLatGoe(member),                    articleLatLoe(member),                    articleLngGoe(member),                    articleLngLoe(member),                    titleLike(articleSearchCondition.getTitle()),                    articleIdLt(articleSearchCondition.getLastId()),                    divisionEq(division),                    articleDAO.market.isNull(),                    articleDAO.category.cid.in(                            JPAExpressions                                    .select(book_CategoryDAO.cid)                                    .from(book_CategoryDAO)                                    .where(                                            one_depthEq(categoryList[0]),                                            two_depthEq(categoryList[1]),                                            three_depthEq(categoryList[2]),                                            four_depthEq(categoryList[3]),                                            five_depthEq(categoryList[4]))),                    articleDAO.progress.eq(Progress.POSTING).or(articleDAO.progress.eq(Progress.TRADING))            )            .limit(10)            .orderBy(articleDAO.article_id.desc())            .fetch(); =&gt; 이 쿼리는 문제가 있는데, 페이징 처리시에 모든 데이터를 가져와서 메모리에 올리고, 그 후에 애플리케이션 레벨에서 페이징 처리를 하게 된다. 이는 성능에 좋지 않다.해결하기 위해선, Join을 하지 않고, 가져오려는 데이터만 가져와서 페이징 처리를 애플리케이션 레벨에서 하지 않고 DBMS 레벨에서 처리하도록 하고, 필요한 데이터들의 ID를 이용해서 다시 한번 쿼리를 날려서 데이터를 가져오는 방법이 있다.  http://www.querydsl.com/를 참조하여 개발하였다.토이프로젝트가 끝난 후 결심  gradle build tool에 대해서도 공부할 예정이다.  특히 기초가 부족하기 때문에 cs와 알고리즘, 자료구조 등을 지속적으로 공부할 예정이다.여러모로 우리에게 벅찬 프로젝트채팅까지 구현하고 싶었으나,(백엔드 개발은 거의 완료된 상태) 프로젝트 조원의 탈주로 인해 프로젝트를 연장은 하되, 일단락 짓기로 마음을 먹은 상태이다.협업툴과 일정관리가 정말 중요하다는 생각이 들었고, 똑같은 실수를 반복하지 않을 것이라 굳게 다짐하였다."
  }
  
]

