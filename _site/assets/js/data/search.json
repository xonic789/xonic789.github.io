[
  
  {
    "title": "스타트업에 대한 나의 생각",
    "url": "/posts/%EC%8A%A4%ED%83%80%ED%8A%B8%EC%97%85%EC%97%90-%EB%8C%80%ED%95%9C-%EB%82%98%EC%9D%98-%EC%83%9D%EA%B0%81/",
    "categories": "내생각",
    "tags": "",
    "date": "2024-05-06 00:00:00 +0900",
    





    
    "snippet": "회사 상황최근 회사 상황이 좋지 않아서 사업팀이 해체되었습니다.우리 회사는 최근 결정되어 있던 투자를 받지 못했습니다.그래서 자금 부족 문제로 인해 일부 인력이 이직해야 한다는 얘기가 나왔습니다.하지만 자금이 얼마나 부족하고 왜 사람들이 떠나야 하는지에 대해서는 팀원들에게 자세히 공개되지 않았습니다.저는 이 회사에서 이미 21개월을 근무했지만, 여전히...",
    "content": "회사 상황최근 회사 상황이 좋지 않아서 사업팀이 해체되었습니다.우리 회사는 최근 결정되어 있던 투자를 받지 못했습니다.그래서 자금 부족 문제로 인해 일부 인력이 이직해야 한다는 얘기가 나왔습니다.하지만 자금이 얼마나 부족하고 왜 사람들이 떠나야 하는지에 대해서는 팀원들에게 자세히 공개되지 않았습니다.저는 이 회사에서 이미 21개월을 근무했지만, 여전히 회사의 방향이나 목표가 뚜렷하지 않다는 느낌을 받고 있습니다.이런 상황에서는 공유와 소통이 소홀히 되고 있다는 느낌을 받습니다.본인이 생각하는 스타트업의 특성그렇다면 이 회사는 진정한 스타트업일까요?제가 알고 있는 스타트업은 빠르게 실험하고 적극적으로 도전하는 환경을 갖추고 있습니다.빠른 시도와 실패를 통해 배우는 문화가 정착되어 있죠.이를 통해 지속적인 성장과 발전을 이루는 것이 가능합니다.그러나 제가 다니는 회사는 이런 스타트업의 특성을 담고 있지 않습니다.결정은 중앙에서만 이뤄지고, 실패에 대한 회고가 부족하며, 팀원들이 자율적으로 일할 수 있는 환경이 부족합니다.또한 피드백을 제대로 주고받지 못해 공정한 의사결정이 이뤄지지 않는 것 같습니다.모든 것이 경영진에 의해 결정되고 진행되는데, 이러한 과정은 매우 무겁고 불편합니다.회사와 팀의 성장사람이 일을 하기 위한 가장 큰 동기는 무엇일까요?바로 자신의 일에 대한 주도성과 책임감일 것입니다. 자신의 결정과 역량을 발휘할 때, 일의 가치를 느낄 수 있습니다.그 반대로, 단순히 돈 받은 만큼 일을 한다고 생각하는 경우에는 일에 대한 열정과 책임감이 줄어들 수 있습니다.일의 결과물이 자신의 것이 아니고, 상사의 지시에 따르는 경우에는 더욱 그렇습니다.회사의 이익회사는 이익을 내야 합니다.이를 위해서는 좋은 팀원들을 고용하고 잘 관리해야 합니다.회사의 가치와 문화에 맞는 인재를 채용하고 유지하는 것이 중요합니다.핏이 맞지 않는 인재는 고용하지 않거나 해고해야 합니다.그리고 회사는 팀으로서의 성장과 발전을 위해 노력해야 한다고 생각합니다.결론저는 회사에서 팀으로서의 성장을 더욱 중요하게 생각합니다.팀원들이 자신의 역할을 맡고 책임감을 가지며 일할 수 있도록 환경을 조성하는 것이 회사의 이익에 큰 도움이 될 것이라고 믿습니다."
  },
  
  {
    "title": "jekyll chirpy theme 사용법",
    "url": "/posts/how-to-write-a-new-post/",
    "categories": "깃허브블로그",
    "tags": "",
    "date": "2024-04-10 00:00:00 +0900",
    





    
    "snippet": "이름 지정과 경로새로운 파일의 이름은 YYYY-MM-DD-TITLE.EXTENSION 형식으로 작성하고, _posts 디렉토리에 위치해야합니다.파일의 EXTENSION은 .md 또는 .markdown이어야합니다.파일을 생성하기 위해서 시간을 아끼려면 Jekyll-Compose 를 사용할 수 있습니다.서문 작성파일의 맨 위에는 YAML Front Mat...",
    "content": "이름 지정과 경로새로운 파일의 이름은 YYYY-MM-DD-TITLE.EXTENSION 형식으로 작성하고, _posts 디렉토리에 위치해야합니다.파일의 EXTENSION은 .md 또는 .markdown이어야합니다.파일을 생성하기 위해서 시간을 아끼려면 Jekyll-Compose 를 사용할 수 있습니다.서문 작성파일의 맨 위에는 YAML Front Matter가 있어야합니다. 이것은 파일의 메타데이터를 정의하는데 사용됩니다.---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG]     # TAG names should always be lowercase---시간대(타임존)게시물의 작성일을 정확하게 기록하기 위해서는 _config.yml 파일 뿐만아니라 게시물의 서문에 시간대를 명시해야합니다.  +/-TTTT는 UTC 시간과의 차이를 나타냅니다. 예를 들어, 한국 시간은 +0900입니다.카테고리와 태그카테고리는 최대 두 개 요소를 포함하도록 디자인 되어있고, 태그는 0개에서 무한대를 사용할 수 있습니다.작성자 정보작성자 정보를 추가하려면 _data/authors.yml 파일에 작성자 정보를 추가해야합니다.&lt;author_id&gt;:  name: &lt;full name&gt;  twitter: &lt;twitter_of_author&gt;  url: &lt;homepage_of_author&gt;그런 다음 작성자를 지정하는 데 author를 사용하거나 여러 항목을 지정하는 데 authors를 사용합니다:author: &lt;작성자 아이디&gt;                     # 단일 항목의 경우# 또는authors: [&lt;작성자1 아이디&gt;, &lt;작성자2 아이디&gt;]   # 여러 항목의 경우목차 작성기본적으로 목차(TOC)는 포스트의 오른쪽 패널에 표시됩니다. 전역적으로 끄려면 _config.yml로 이동하여 변수 toc의 값을 false로 설정하세요. 특정 포스트의 목차를 끄려면 다음을 포스트의 프론트 매터에 추가하세요:---toc: false---댓글_config.yml 파일의 comments.active 변수에 의해서 글로벌 댓글 기능이 정의됩니다. 이 변수에 댓글 시스템을 선택한 후, 모든 게시물에 대해 댓글이 활성화 됩니다.또한, 특정 포스트의 댓글을 끄려면 다음을 포스트의 프론트 매터에 추가하세요:---comments: false---MermaidMermaid는 훌륭한 다이어그램 생성 도구입니다. 게시물에서 이를 활성화하려면 YAML 블록에 다음을 추가하십시오:---mermaid: true---이미지캡션이미지의 다음 줄에 기울임을 추가하면 캡션으로 처리되어 이미지 하단에 나타납니다.![이미지 설명](/경로/이미지)_이미지 캡션_크기이미지가 로드될 때 페이지 내용 레이아웃이 변하지 않도록 각 이미지의 너비와 높이를 설정해야 합니다:![데스크톱 뷰](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }SVG의 경우 최소한 너비를 지정해야 합니다. 그렇지 않으면 렌더링되지 않습니다:위와 같이 width 및 height를 약어로 사용할 수 있습니다.위치기본적으로 이미지는 가운데 정렬되지만, normal, left, right 클래스 중 하나를 사용하여 위치를 지정할 수 있습니다.한 번 위치가 지정되면 이미지 캡션을 추가해서는 안됩니다.기본 위치이미지가 왼쪽에 정렬됩니다:![데스크톱 뷰](/assets/img/sample/mockup.png){: .normal }왼쪽에 띄우기![데스크톱 뷰](/assets/img/sample/mockup.png){: .left }오른쪽에 띄우기![데스크톱 뷰](/assets/img/sample/mockup.png){: .right }그림자프로그램 창의 스크린샷을 표시할 때 그림자 효과를 보여줄 수 있습니다:![데스크톱 뷰](/assets/img/sample/mockup.png){: .shadow }CDN URL이미지를 CDN에 호스팅하는 경우, 모든 이미지의 경로 앞에 반복해서 CDN URL을 작성하지 않아도 됩니다. 이를 위해 _config.yml 파일의 img_cdn 변수를 할당할 수 있습니다:img_cdn: https://cdn.comimg_cdn이 할당되면 /로 시작하는 모든 이미지의 경로에 CDN 접두사 https://cdn.com이 추가됩니다.예를 들어, 이미지를 사용하는 경우:![꽃](/경로/꽃.png)구문 분석 결과 이미지 경로 앞에 CDN 접두사 https://cdn.com이 자동으로 추가됩니다:&lt;img src=\"https://cdn.com/경로/꽃.png\" alt=\"꽃\" /&gt;이미지 경로게시물에 여러 이미지가 포함된 경우, 이미지의 경로를 반복해서 정의하는 것은 시간이 많이 걸릴 수 있습니다. 이를 해결하기 위해 게시물의 YAML 블록에서 이 경로를 정의할 수 있습니다:---img_path: /img/경로/---그런 다음 Markdown의 이미지 소스에서 파일 이름을 직접 작성할 수 있습니다:![꽃](flower.png)결과는 다음과 같습니다.&lt;img src=\"/img/경로/flower.png\" alt=\"꽃\" /&gt;미리보기 이미지게시물 상단에 이미지를 추가하려면 1200 x 630 해상도의 이미지를 제공하십시오. 이미지의 종횡비가 1.91 : 1에 부합하지 않는 경우 이미지가 크기 조정되고 잘려납니다.이러한 전제조건을 알고 나면 이미지의 속성을 설정할 수 있습니다:---image:  path: /경로/이미지  alt: 이미지 대체 텍스트---img_path도 미리보기 이미지에 전달될 수 있으며, 설정된 경우 path 속성에 이미지 파일 이름만 필요합니다.간단한 사용을 위해 이미지만 사용하여 경로를 정의할 수도 있습니다.---image: /경로/이미지---고정된 게시물홈 페이지 상단에 하나 이상의 게시물을 고정할 수 있으며, 고정된 게시물은 발행 날짜를 기준으로 역순으로 정렬됩니다. 다음으로 활성화할 수 있습니다:---pin: true---나머지 프롬프트, Syntax, 비디오 등은 직접 가셔서 보시길 바랍니다! ㅎㅎchirpy theme"
  },
  
  {
    "title": "소프트웨어 장인 정신",
    "url": "/posts/software-professional/",
    "categories": "소프트웨어 프로페셔널",
    "tags": "소프트웨어, software, professional, 책읽기",
    "date": "2024-04-05 00:00:00 +0900",
    





    
    "snippet": "소프트웨어 장인정신  읽은 책: 소프트웨어 장인소프트웨어 장인정신주관적인 정의  소프트웨어 장인정신은 마스터가 되어가는 긴 여정이다. 소프트웨어 장인 정신은 소프트웨어 개발자가 스스로 선택한 커리어에 책임을 가지고, 지속적으로 새로운 도구와 기술을 익히며 발전하겠다는 마음가짐이다.소프트웨어 장인 정신은 책임감, 프로페셔널리즘, 실용주의 그리고 소프트웨...",
    "content": "소프트웨어 장인정신  읽은 책: 소프트웨어 장인소프트웨어 장인정신주관적인 정의  소프트웨어 장인정신은 마스터가 되어가는 긴 여정이다. 소프트웨어 장인 정신은 소프트웨어 개발자가 스스로 선택한 커리어에 책임을 가지고, 지속적으로 새로운 도구와 기술을 익히며 발전하겠다는 마음가짐이다.소프트웨어 장인 정신은 책임감, 프로페셔널리즘, 실용주의 그리고 소프트웨어 개발자로서의 자부심을 의미한다.짧은 정의  소프트웨어 장인정신은 소프트웨어 개발의 프로페셜리즘에 대한 것이다.이 부분이 소프트웨어 장인정신에서 가장 중요한 내용이다.정의 이상의 의미소프트웨어 장인정신은 어떤 이념이나 마음가짐에 더 가깝다고 생각한다. 자신이 하는 일에 주인의식을 가지고 프로페셔널하게 행동하고, 고객이 원하는 것이 무엇이든 달성할 수 있도록 돕는다. 다른 개발자들에게 배우고 자신의 지식을 나누며, 경험이 부족한 개발자들을 멘토링 하는 것들이다.메니페스토  소프트웨어 장인을 열망하는 우리는, 스스로의 기술을 연마하고, 다른 사람들이 기술을 배울 수 있도록 도움으로써 프로페셔널 소프트웨어 개발의 수준을 높인다. 이러한 일을 하는 과정에서 우리는 다음과 같은 가치들을 추구한다.  동작하는 소프트웨어뿐만 아니라, 정교하고 솜씨 있게 만들어진 작품을,변화에 대응하는 것뿐만 아니라, 계속해서 가치를 더하는 것을,개별적으로 협력하는 것뿐만 아니라, 프로페셔널 커뮤니티를 조성하는 것을,고객과 협업하는 것뿐만 아니라, 생산적인 동반자 관계를,  이 왼쪽의 항목들을 추구하는 과정에서, 오른쪽 항목들이 꼭 필요함을 의미한다.기술적 실행 관례올바른 일 vs 올바른 실행일을 올바르게 제대로 수행하고 있다는 것은 어떻게 알 수 있을까? 코드의 품질과 설계에서는 빠르고 짧은 피드백 루프를 어떻게 만들 수 있을까?소프트웨어 장인정신은 기술적 실행 관례에 집중함으로써 코드의 품질에 대한 빠르고 짧은 피드백 루프를 제공해 애자일을 보완하는 효과가 있다.기술적 실행 관례들은 우리가 일을 ‘올바르게’하고 있는지 알 수 있게 해준다.실행 관례와 가치비즈니스 가치 중심어떻게 하면 팀(또는 관리자, 회사)에 TDD나 페어 프로그래밍같은 것들을 도입하도록 설득할 수 있는가?기술적 실행 관례들 그 자체를 직접적으로 팔려고 드는 것은 아무런 의미가 없다.현재 일하는 방식과 비교해서 그 것이 가져올 이익에 집중을 해야 한다.빠른 피드백 루프, 요구사항과 비용에 대한 더 나은 이해, 지식 공유, 줄어드는 버그, 전체적으로 자동화되고 릴리즈가 빨라지는 일들이 기술적 실행관례를 도입함으로써 얻을 수 있는 가치들이다.자동화된 테스트자동화된 테스트는 클릭 한번으로 전체 시스템을 단 몇 분만에 검증할 수 있게 해준다.코드가 올바른지 알려주는 피드백 루프가 몇 주에서 몇 분으로 줄어 들면 실수를 거의 즉시 고칠 수 있다.자동화된 테스트는 실제 측정 가능한 비즈니스적 가치를 가져다 준다.테스트 먼저아이디어를 생각해내는 데도 도움이 되고 한 번에 하나씩만 집중할 수 있다.테스트 코드가 준비되어 있으면 각 테스트 작업들은 몇 msec(단위 테스트)에서 몇 초(상위 수준 테스트)정도 소요되어 피드백 루프가 상당히 빨라진다.테스트 코드는 잘 정리된 요구사항의 역할도 하기 때문에 딱 필요한 만큼만 코딩하도록 유도한다.이러한 것들이 바로 비즈니스적인 가치다.테스트 주도 개발사실 TDD는 설계에 대한 실행 관례다. 테스트가 코딩 방향을 주도하면 복잡한 코드를 작성하는 것 자체가 어려워진다.정확히 요구사항만큼만 만족시키는, 즉 테스트로 규정된 부분만 작성하게 되기 때문이다.첫 설계 단계에서는 요구사항을 확대 해석하고 미래에 있을지 모를 부가 조건들이 추가되기 쉬워 설계가 커지고 복잡해지는(BDUF: Big Design Up Front) 경향이 있다.그렇게 되지 않도록 막아준다.코드가 복잡하고 방대하면 테스트 자체가 어렵기 때문이다.  TDD와 설계 리뷰 미팅이 서로 배타적인 것은 아니다. 둘 다 필요하다. 하지만 각각이 제공하는 가치와 피드백 루프의 주기가 다름을 이해하고 있어야한다.TDD는 코드의 설계, 단순성, 유지보수 용이성에 대해 피드백이 빠르다. 또한 코드에 대한 살아 움직이는 문서 역할을 한다.회귀 테스트 역할도 해준다. 이런 것들이 TDD가 주는 비즈니스적인 가치다.지속적인 통합  지속적인 통합은 TDD와 함께 수행되어 피드백 루프를 단 몇 분으로 줄일 수 있다.          QA팀을 통해서 변경점마다, 통합 때마다 테스트하는 것이다. 이 건 며칠에서 몇 주 후에 버그가 있는지 피드백을 받을 수 있다.        이러한 실행 관례는 ‘일단 멈추고 버그부터 수정한다는 태도가 필요하다.’  시스템이 항상 배포 가능한 상태로 유지되고 버그가 누적되지 않는다는 점에서 효율이 높다는 장점이 있다.  훌륭한 테스터는 자동화 하기 어려운 임의의 사용자 시나리오에 집중하여 개발자를 돕는다.페어 프로그래밍코드 리뷰는 시스템에 대한 지식과 유용한 코딩 스킬을 팀 전체에 전하는 데도 좋다. 중요한 것은, 설계 리뷰와 마찬가지로 얼마나 자주 하느냐다.여러가지 문제들로 인해서 피드백 루프의 주기가 길어질 가능성이 높다.하지만 페어 프로그래밍을 하면 코드가 작성되자마자 그 품질에 대해 피드백을 받을 수 있다같은 페어끼리 너무 오래 있으면 효과가 적다. 하루 이틀 단위로 주기적으로 페어를 바꾸는 것이 좋다.페어 프로그래밍은 팀의 지식을 공유하고, 코드의 품질을 높이며, 팀의 생산성을 높이는데 도움이 된다.이러한 것들이 비즈니스적인 가치다. 즉각적인 피드백 루프가 만들어진다.리팩토링레거시 애플리케이션을 대상으로 일을 할 때, 전체 시스템을 한꺼번에 새로 작성하고 싶은 욕구를 조심해야 한다.이럴 때는 수정되는 부분에 한정해서 리펙토링을 집중하는 것이 더 나은 접근 방법이다.프로페셔널로써 행동한다는 것은 트레이드오프를 이해한다는 것이다. 몇년동안 바뀐 적이 없는 부분을 리팩토링하는 것은 의미가 없다. 애당초 코드를 수정할 필요가 없다면, 리팩토링해야 할 이유도 없다. 유지보수가 쉬운 깨끗한 코드는 개발 속도를 높이고 버그가 만들어질 가능성을 낮춘다. 이 것이 리팩토링의 비즈니스적인 가치다.책임감각 실행 관례들의 가치를 설명함에도 불구하고 여전히 많은 사람들이 받아들이기를 거부한다.“그런 것들은 다른 데서 그렇게 하고 있다는 사례에 지나지 않는다. 그 중 많은 것들이 필요없다. 실행 관례들 없이도 좋은 소프트웨어를 쉽게 개발할 수 있다” 라는 말들이 여전히 반복해서 들리고 있다.그 것이 사실일 수도 있다 하더라도, 대단히 모호한 주장이다. 구글에서 실패한 소프트웨어 프로젝트 비율을 검색해보면 얼마나 많은 프로젝트들이 이런 저런 형태로 실패했는지 여러 보고 자료와 통게를 찾아볼 수 있다.출처에 따라 다르지만 실패 비율이 30%에서 70%에 이른다.개발자이든 프로젝트 매니저이든, 비즈니스 담당이든, 이러한 실행 관례를 원하지 않는다고 하면 귀담아 들어야 한다. 기분 나쁘게 생각하거나 그 사람의 지식 부족을 의심할 이유는 전혀 없다. 우리는 그런 사람들과의 대화에서 배워야한다.하지만 앞서 설명된 가치들을 이야기한 후 “이러한 가치와 최소한 동등한 수준의 가치를 만들어 내기 위해 당신은(혹은 우리는) 무엇을 하고 있습니까? 이러한 실행 관례보다 더 나은 방법이 있습니까?” 우리의 의사 결정에 책임감을 가져야 한다. 여기에는 실행 관례를 도입하지 않는 결정도 포함된다.관리자들 역시 팀이 특정 실행 관례를 따르지 못하도록 할 때 그에 대한 책임감이 있어야 한다.실용주의언제든지 TDD보다 더 나은 가치와 더 빠른 피드백 루프를 줄 수 있는 다른 것이 있다면 그 것을 TDD 대신 도입해야 한다.무언가를 절대적인 진리로 바라보는 것은 바람직하지 않다. 항상 우리가 무엇을 하고 있고 그것을 왜 하고 있는지 질문해야한다.어떤 실행 관례가 다른 실행 관례보다 더 나은지 알아보는 가장 좋은 방법은 프로젝트에 어떤 가치를 주는지, 피드백 루프가 얼마나 긴지 비교해보는 것이다.소프트웨어 장인 정신은 전이된다.실제로 글쓴이가 경험한 일을 기반하여 말하자면, 소프트웨어 장인 정신은 전이된다.한 회사에서 있었던 일인데, 글쓴이 본인이 문제가 산재해있었던 조직에 소프트웨어 장인을 여럿 모아서 일을 했던 경험이 있다.여러가지 방법들로 다시금 버그, 딜리버리 속도 등이 점진적으로 개선되었다.모든 변화를 추진하기 전에, 그런 변화들의 영향에 대해서 고려해야한다.많은 사람들에게 이야기를 하고 여러 종류의 회의론자들이 던질 수 있는 난감한 질문들에 답할 준비가 되어 있어야 한다.작업을 구현과 테스트로 나누어서는 안 된다. 실행 관례를 전파하는 가장 효율적인 방법은 모범을 보이는 것이다.나의 생각읽으면서 답답하고 불편한 마음이 계속 든다. 나는 소프트웨어 장인이 되고 싶다. 소프트웨어 장인이라는 단어를 생각하면 가슴이 두근 거린다.앞으로 나는 어떻게 해야할까? 어떻게 하면 소프트웨어 장인이 될 수 있을까?  첫번째로는 블로그 포스트를 작성하면서 나의 생각을 정리하고, 다른 사람들과 소통하고 싶다.  두번째로는 책을 읽는 것에만 그치는 것이 아닌 읽은 것을 정리하고, 일과 내 삶에 적용해볼 것이다.  세번째로는 새로운 기술을 배우고, 적용해보며 나의 역량을 키워나갈 것이다.  네번째로는 다른 사람들과 소통하며, 서로의 생각을 공유하고 배울 것이다.  다섯번째로는 나의 목표를 세우고, 그것을 달성하기 위해 노력할 것이다."
  },
  
  {
    "title": "토이프로젝트 회고",
    "url": "/posts/%ED%86%A0%EC%9D%B4%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%9A%8C%EA%B3%A0/",
    "categories": "회고",
    "tags": "retrospect, 회고",
    "date": "2021-06-16 00:00:00 +0900",
    





    
    "snippet": "docker, WSL2, linux OS, Cloud Server(NCP), nginx, Spring boot, JPA,Spring data JPA, QueryDSL, AWS S3https://okky.kr 에 토이프로젝트 구인글을 올렸고, 뜻대로 프론트개발자 2명, 서버개발자 1명을 모집하여총 구성인원은 프론트개발자 2명, 서버개발자 본인포함 2명,...",
    "content": "docker, WSL2, linux OS, Cloud Server(NCP), nginx, Spring boot, JPA,Spring data JPA, QueryDSL, AWS S3https://okky.kr 에 토이프로젝트 구인글을 올렸고, 뜻대로 프론트개발자 2명, 서버개발자 1명을 모집하여총 구성인원은 프론트개발자 2명, 서버개발자 본인포함 2명, 웹 디자이너까지 5명이었다.프로젝트 리딩이 이토록 조원 컨트롤이 안될줄은 몰랐다.게다가 접점이 있는 사람들이 아니었다보니 더욱 힘들었던 것 같다.기획단계기획단계에선 조원들의 여러 의견과 아이디어를 조합하여 최종적으로 중고책거래 웹 어플리케이션이 뽑혔다.요구사항 등을 적절히 분석하지 못했는지, 기획단계에선 부족한점이 많았다고 생각한다.협업툴의 중요성을 실감하게 된 계기가 되지 않았나 싶다. 노션 무료버전은 너무나 스토리지가 작았다.설계단계프로젝트 기간이 충분하다고 생각하지 않았는데도 불구하고 많은 기능을 구현하려 했다.돌이켜보면 기능을 줄이고, 기능을 구현하는데 집중했어야 했는데, 그렇지 못했다.기술스택FE 언어는 typescript를 적용해보고 싶다 하여 승인하였다.처음 개발에 적용해봐서 그런지 프론트엔트 개발 속도가 나질 않았다.BE 언어는 java 11버전을 사용하였으며, 람다와 스트림을 사용해보려 노력해보았다.자잘한 얘기국비지원학원 프로젝트 이후 다시 한번 깨달은 점은, 토이프로젝트에서 책임감이 결여된 조원과의 커뮤니케이션은 상당히 어렵다는 것이었다.그래서 나는 최대한 많이 조원들과 얘기 나누고, 시간을 같이 보내려 노력했었다.클라우드 서버를 이용해서 배포를 처음 해보았는데, 배포하며 리눅스, 정적웹서버(프록시서버), ssl(https) 등을 적용하며 서버 관련하여 많이 깨달았다.docker로 centOS 이미지를 조원들에게 배포하였는데, 클라우드 서버 환경과 동일하게 구성하며 개발 환경을 조성하였다.도커를 사용해보지 않았던 조원들에게 사용법을 공유하고 서버 환경등을 설명하느라 시간을 많이 잡아먹었다.리눅스 CLI에 조금은 익숙해져 너무 좋았다.무중단 배포, jenkins등을 공부해보고 싶은 계기가 되었다.일일히 빌드된 파일을 서버에 전송하였는데, 상당히 번거로운 일이었다.여기서 구글드라이브를 사용하였고, gdown이라는 라이브러리를 사용하였다.처음 DB 설계 후 JPA 설계를 하였고, 연관관계 중 @ManyToOne 등의 default FetchType은 Eager이었으므로, 원치않는 쿼리가 자꾸 나가 모든 전략을 LAZY로 설정하여 작업 하였다.스스로 N + 1 쿼리를 짜지 않도록 유의하여 개발하였다.알라딘 api를 적용하여 책 카테고리 등을 받아왔는데, 프록시서버 구성으로 cors 문제는 발생하지 않도록 설계하였다.게시물 필터링 적용이 필요하여, jpql 로 개발하였는데, 개발하다 querydsl을 알게되어 querydsl 사용하여 동적쿼리를 구성하였다.select(new QArticleDTO(                    articleDAO.article_id,                    articleDAO.countDAO,                    articleDAO.title,                    articleDAO.tprice,                    articleDAO.progress,                    articleDAO.category,                    articleDAO.member.nickname,                    articleDAO.write_date,                    articleDAO.imageInfo.image1))            .from(articleDAO)            .join(articleDAO.member, memberDAO)            .join(articleDAO.countDAO, countDAO)            .join(articleDAO.category, book_CategoryDAO)            .join(articleDAO.imageInfo, image_infoDAO)            .where(                    articleLatGoe(member),                    articleLatLoe(member),                    articleLngGoe(member),                    articleLngLoe(member),                    titleLike(articleSearchCondition.getTitle()),                    articleIdLt(articleSearchCondition.getLastId()),                    divisionEq(division),                    articleDAO.market.isNull(),                    articleDAO.category.cid.in(                            JPAExpressions                                    .select(book_CategoryDAO.cid)                                    .from(book_CategoryDAO)                                    .where(                                            one_depthEq(categoryList[0]),                                            two_depthEq(categoryList[1]),                                            three_depthEq(categoryList[2]),                                            four_depthEq(categoryList[3]),                                            five_depthEq(categoryList[4]))),                    articleDAO.progress.eq(Progress.POSTING).or(articleDAO.progress.eq(Progress.TRADING))            )            .limit(10)            .orderBy(articleDAO.article_id.desc())            .fetch(); =&gt; 이 쿼리는 문제가 있는데, 페이징 처리시에 모든 데이터를 가져와서 메모리에 올리고, 그 후에 애플리케이션 레벨에서 페이징 처리를 하게 된다. 이는 성능에 좋지 않다.해결하기 위해선, Join을 하지 않고, 가져오려는 데이터만 가져와서 페이징 처리를 애플리케이션 레벨에서 하지 않고 DBMS 레벨에서 처리하도록 하고, 필요한 데이터들의 ID를 이용해서 다시 한번 쿼리를 날려서 데이터를 가져오는 방법이 있다.  http://www.querydsl.com/를 참조하여 개발하였다.토이프로젝트가 끝난 후 결심  gradle build tool에 대해서도 공부할 예정이다.  특히 기초가 부족하기 때문에 cs와 알고리즘, 자료구조 등을 지속적으로 공부할 예정이다.여러모로 우리에게 벅찬 프로젝트채팅까지 구현하고 싶었으나,(백엔드 개발은 거의 완료된 상태) 프로젝트 조원의 탈주로 인해 프로젝트를 연장은 하되, 일단락 짓기로 마음을 먹은 상태이다.협업툴과 일정관리가 정말 중요하다는 생각이 들었고, 똑같은 실수를 반복하지 않을 것이라 굳게 다짐하였다."
  }
  
]

