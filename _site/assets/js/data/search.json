[
  
  {
    "title": "jekyll chirpy theme 사용법",
    "url": "/posts/how-to-write-a-new-post/",
    "categories": "깃허브블로그",
    "tags": "",
    "date": "2024-04-10 00:00:00 +0900",
    





    
    "snippet": "이름 지정과 경로새로운 파일의 이름은 YYYY-MM-DD-TITLE.EXTENSION 형식으로 작성하고, _posts 디렉토리에 위치해야합니다.파일의 EXTENSION은 .md 또는 .markdown이어야합니다.파일을 생성하기 위해서 시간을 아끼려면 Jekyll-Compose 를 사용할 수 있습니다.서문 작성파일의 맨 위에는 YAML Front Mat...",
    "content": "이름 지정과 경로새로운 파일의 이름은 YYYY-MM-DD-TITLE.EXTENSION 형식으로 작성하고, _posts 디렉토리에 위치해야합니다.파일의 EXTENSION은 .md 또는 .markdown이어야합니다.파일을 생성하기 위해서 시간을 아끼려면 Jekyll-Compose 를 사용할 수 있습니다.서문 작성파일의 맨 위에는 YAML Front Matter가 있어야합니다. 이것은 파일의 메타데이터를 정의하는데 사용됩니다.---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG]     # TAG names should always be lowercase---시간대(타임존)게시물의 작성일을 정확하게 기록하기 위해서는 _config.yml 파일 뿐만아니라 게시물의 서문에 시간대를 명시해야합니다.  +/-TTTT는 UTC 시간과의 차이를 나타냅니다. 예를 들어, 한국 시간은 +0900입니다.카테고리와 태그카테고리는 최대 두 개 요소를 포함하도록 디자인 되어있고, 태그는 0개에서 무한대를 사용할 수 있습니다.작성자 정보작성자 정보를 추가하려면 _data/authors.yml 파일에 작성자 정보를 추가해야합니다.&lt;author_id&gt;:  name: &lt;full name&gt;  twitter: &lt;twitter_of_author&gt;  url: &lt;homepage_of_author&gt;그런 다음 작성자를 지정하는 데 author를 사용하거나 여러 항목을 지정하는 데 authors를 사용합니다:author: &lt;작성자 아이디&gt;                     # 단일 항목의 경우# 또는authors: [&lt;작성자1 아이디&gt;, &lt;작성자2 아이디&gt;]   # 여러 항목의 경우목차 작성기본적으로 목차(TOC)는 포스트의 오른쪽 패널에 표시됩니다. 전역적으로 끄려면 _config.yml로 이동하여 변수 toc의 값을 false로 설정하세요. 특정 포스트의 목차를 끄려면 다음을 포스트의 프론트 매터에 추가하세요:---toc: false---댓글_config.yml 파일의 comments.active 변수에 의해서 글로벌 댓글 기능이 정의됩니다. 이 변수에 댓글 시스템을 선택한 후, 모든 게시물에 대해 댓글이 활성화 됩니다.또한, 특정 포스트의 댓글을 끄려면 다음을 포스트의 프론트 매터에 추가하세요:---comments: false---MermaidMermaid는 훌륭한 다이어그램 생성 도구입니다. 게시물에서 이를 활성화하려면 YAML 블록에 다음을 추가하십시오:---mermaid: true---이미지캡션이미지의 다음 줄에 기울임을 추가하면 캡션으로 처리되어 이미지 하단에 나타납니다.![이미지 설명](/경로/이미지)_이미지 캡션_크기이미지가 로드될 때 페이지 내용 레이아웃이 변하지 않도록 각 이미지의 너비와 높이를 설정해야 합니다:![데스크톱 뷰](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }SVG의 경우 최소한 너비를 지정해야 합니다. 그렇지 않으면 렌더링되지 않습니다:위와 같이 width 및 height를 약어로 사용할 수 있습니다.위치기본적으로 이미지는 가운데 정렬되지만, normal, left, right 클래스 중 하나를 사용하여 위치를 지정할 수 있습니다.한 번 위치가 지정되면 이미지 캡션을 추가해서는 안됩니다.기본 위치이미지가 왼쪽에 정렬됩니다:![데스크톱 뷰](/assets/img/sample/mockup.png){: .normal }왼쪽에 띄우기![데스크톱 뷰](/assets/img/sample/mockup.png){: .left }오른쪽에 띄우기![데스크톱 뷰](/assets/img/sample/mockup.png){: .right }그림자프로그램 창의 스크린샷을 표시할 때 그림자 효과를 보여줄 수 있습니다:![데스크톱 뷰](/assets/img/sample/mockup.png){: .shadow }CDN URL이미지를 CDN에 호스팅하는 경우, 모든 이미지의 경로 앞에 반복해서 CDN URL을 작성하지 않아도 됩니다. 이를 위해 _config.yml 파일의 img_cdn 변수를 할당할 수 있습니다:img_cdn: https://cdn.comimg_cdn이 할당되면 /로 시작하는 모든 이미지의 경로에 CDN 접두사 https://cdn.com이 추가됩니다.예를 들어, 이미지를 사용하는 경우:![꽃](/경로/꽃.png)구문 분석 결과 이미지 경로 앞에 CDN 접두사 https://cdn.com이 자동으로 추가됩니다:&lt;img src=\"https://cdn.com/경로/꽃.png\" alt=\"꽃\" /&gt;이미지 경로게시물에 여러 이미지가 포함된 경우, 이미지의 경로를 반복해서 정의하는 것은 시간이 많이 걸릴 수 있습니다. 이를 해결하기 위해 게시물의 YAML 블록에서 이 경로를 정의할 수 있습니다:---img_path: /img/경로/---그런 다음 Markdown의 이미지 소스에서 파일 이름을 직접 작성할 수 있습니다:![꽃](flower.png)결과는 다음과 같습니다.&lt;img src=\"/img/경로/flower.png\" alt=\"꽃\" /&gt;미리보기 이미지게시물 상단에 이미지를 추가하려면 1200 x 630 해상도의 이미지를 제공하십시오. 이미지의 종횡비가 1.91 : 1에 부합하지 않는 경우 이미지가 크기 조정되고 잘려납니다.이러한 전제조건을 알고 나면 이미지의 속성을 설정할 수 있습니다:---image:  path: /경로/이미지  alt: 이미지 대체 텍스트---img_path도 미리보기 이미지에 전달될 수 있으며, 설정된 경우 path 속성에 이미지 파일 이름만 필요합니다.간단한 사용을 위해 이미지만 사용하여 경로를 정의할 수도 있습니다.---image: /경로/이미지---고정된 게시물홈 페이지 상단에 하나 이상의 게시물을 고정할 수 있으며, 고정된 게시물은 발행 날짜를 기준으로 역순으로 정렬됩니다. 다음으로 활성화할 수 있습니다:---pin: true---나머지 프롬프트, Syntax, 비디오 등은 직접 가셔서 보시길 바랍니다! ㅎㅎchirpy theme"
  },
  
  {
    "title": "소프트웨어 장인 정신",
    "url": "/posts/software-professional/",
    "categories": "소프트웨어 프로페셔널",
    "tags": "소프트웨어, software, professional",
    "date": "2024-04-05 00:00:00 +0900",
    





    
    "snippet": "소프트웨어 장인정신비즈니스 가치 중심어떻게 하면 팀(또는 관리자, 회사)에 TDD나 페어 프로그래밍같은 것들을 도입하도록 설득할 수 있는가?기술적 실행 관례들 그 자체를 직접적으로 팔려고 드는 것은 아무런 의마가 없다.상대방을 납득 시킬 수 없음.현재 일하는 방식과 비교해서 그 것이 가져올 이익에 집중을 해야 한다!빠른 피드백 루프, 요구사항과 비용에...",
    "content": "소프트웨어 장인정신비즈니스 가치 중심어떻게 하면 팀(또는 관리자, 회사)에 TDD나 페어 프로그래밍같은 것들을 도입하도록 설득할 수 있는가?기술적 실행 관례들 그 자체를 직접적으로 팔려고 드는 것은 아무런 의마가 없다.상대방을 납득 시킬 수 없음.현재 일하는 방식과 비교해서 그 것이 가져올 이익에 집중을 해야 한다!빠른 피드백 루프, 요구사항과 비용에 대한 더 나은 이해, 지식 공유, 줄어드는 버그, 전체적으로 자동화되고 릴리즈가 빨라지는 일들이 기술적 실행관례를 도입함으로써 얻을 수 있는 가치들!테스트 주도 개발  사실 TDD는 설계에 대한 실행 관례다.  테스트가 코딩 방향을 주도하면 복잡한 코드를 작성하는 것 자체가 어려워진다.          정확히 요구사항만큼만 만족시키는, 즉 테스트로 규정된 부분만 작성하게 되기 때문이다.                  첫 설계 단계에서는 요구사항을 확대 해석하고 미래에 있을지 모를 부가 조건들이 추가되기 쉬워 설계가 커지고 복잡해지는(BDUF: Big Design Up Front) 경향이 있다.          그렇게 되지 않도록 막아준다.                    코드가 복잡하고 방대하면 테스트 자체가 어렵기 때문이다.        TDD와 설계 리뷰 미팅이 서로 배타적인 것은 아니다. 둘 다 필요하다. 하지만 각각이 제공하는 가치와 피드백 루프의 주기가 다름을 이해하고 있어야한다.  TDD는 코드의 설계, 단순성, 유지보수 용이성에 대해 피드백이 빠르다. 또한 코드에 대한 살아 움직이는 문서 역할을 한다.  회귀 테스트 역할도 해준다. 이런 것들이 TDD가 주는 비즈니스적인 가치다.지속적인 통합  지속적인 통합은 TDD와 함께 수행되어 피드백 루프를 단 몇 분으로 줄일 수 있다.          QA팀을 통해서 변경점마다, 통합 때마다 테스트하는 것이다. 이 건 며칠에서 몇 주 후에 버그가 있는지 피드백을 받을 수 있다.        이러한 실행 관례는 ‘일단 멈추고 버그부터 수정한다는 태도가 필요하다.’  시스템이 항상 배포 가능한 상태로 유지되고 버그가 누적되지 않는다는 점에서 효율이 높다는 장점이 있다.  훌륭한 테스터는 자동화 하기 어려운 임의의 사용자 시나리오에 집중하여 개발자를 돕는다.리팩토링  레거시 애플리케이션을 대상으로 일을 할 때, 전체 시스템을 한꺼번에 새로 작성하고 싶은 욕구를 조심해야 한다.  이럴 때는 수정되는 부분에 한정해서 리펙토링을 집중하는 것이 더 나은 접근 방법이다.  프로페셔널로써 행동한다는 것은 트레이드오프를 이해한다는 것이다.          몇년동안 바뀐 적이 없는 부분을 리팩토링하는 것은 의미가 없다. 애당초 코드를 수정할 필요가 없다면, 리팩토링해야 할 이유도 없다.        유지보수가 쉬운 깨끗한 코드는 개발 속도를 높이고 버그가 만들어질 가능성을 낮춘다. 이 것이 리팩토링의 비즈니스적인 가치다.책임감  여전히 많은 사람들이 받아들이기를 거부한다.  “그런 것들은 다른 데서 그렇게 하고 있다는 사례에 지나지 않는다. 그 중 많은 것들이 필요없다. 실행 관례들 없이도 좋은 소프트웨어를 쉽게 개발할 수 있다” 라는 말들이 여전히 반복해서 들리고 있다.  그 것이 사실일 수도 있다 하더라도, 대단히 모호한 주장이다. 구글에서 실패한 소프트웨어 프로젝트 비율을 검색해보면 얼마나 많은 프로젝트들이 이런 저런 형태로 실패했는지 여러 보고 자료와 통게를 찾아볼 수 있다.          출처에 따라 다르지만 실패 비율이 30%에서 70%에 이른다.        개발자이든 프로젝트 매니저이든, 비즈니스 담당이든, 이러한 실행 관례를 원하지 않는다고 하면 귀담아 들어야 한다. 기분 나쁘게 생각하거나 그 사람의 지식 부족을 의심할 이유는 전혀 없다. 우리는 그런 사람들과의 대화에서 배워야한다.  하지만 앞서 설명된 가치들을 이야기한 후 “이러한 가치와 최소한 동등한 수준의 가치를 만들어 내기 위해 당신은(혹은 우리는) 무엇을 하고 있습니까? 이러한 실행 관례보다 더 나은 방법이 있습니까?”  우리의 의사 결정에 책임감을 가져야 한다. 여기에는 실행 관례를 도입하지 않는 결정도 포함된다.  관리자들 역시 팀이 특정 실행 관례를 따르지 못하도록 할 때 그에 대한 책임감이 있어야 한다.실용주의  언제든지 TDD보다 더 나은 가치와 더 빠른 피드백 루프를 줄 수 있는 다른 것이 있다면 그 것을 TDD 대신 도입해야 한다.  무언가를 절대적인 진리로 바라보는 것은 바람직하지 않다. 항상 우리가 무엇을 하고 있고 그것을 왜 하고 있는지 질문해야한다.  어떤 실행 관례가 다른 실행 관례보다 더 나은지 알아보는 가장 좋은 방법은 프로젝트에 어떤 가치를 주는지, 피드백 루프가 얼마나 긴지 비교해보는 것이다.결론  우리가 이루려는 것이 무엇인지 논의해야 한다.  소프트웨어 개발/납품 절차 중에서 어떤 부분을 얼마만큼 개선하길 원하는가? 이러한 것이 정의되고 나면 그 것을 달성하기 위해 어떤 실행 관례를 도입할지 말할 수 있다.투자로써의 일터  거쳐가는 모든 직장, 프로젝트들 하나 하나를 투자로 인식하는 것이 가장 중요하다.나의 생각읽으면서 답답하고 불편한 마음이 계속 든다. 나는 소프트웨어 프로페셔널이 되고 싶다. 소프트웨어 프로페셔널을 생각하면 가슴이 두근 거린다.소프트웨어 프로페셔널이 어떤 것인지 묻노라면, 의미에 대한 정의는 다양할 것이다.앞으로 좋은 개발자가 되기 위해 노력할 것이다.첫번째로는 블로그 포스트를 작성하면서 나의 생각을 정리하고, 다른 사람들과 소통하고 싶다.두번째로는 책을 읽는 것에만 그치는 것이 아닌 읽은 것을 정리하고, 정리하는 글을 작성하며 나의 생각을 정리하고 싶고 일과 내 삶에 적용해볼 것이다.세번째로는 새로운 기술을 배우고, 적용해보며 나의 역량을 키워나갈 것이다.네번째로는 다른 사람들과 소통하며, 서로의 생각을 공유하고 배울 것이다.다섯번째로는 나의 생각을 정리하고, 나의 목표를 세우고, 그것을 달성하기 위해 노력할 것이다."
  }
  
]

